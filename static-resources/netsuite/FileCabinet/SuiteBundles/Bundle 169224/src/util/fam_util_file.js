/**
 * Copyright Â© 2016, 2017, Oracle and/or its affiliates. All rights reserved.
*/

define([
    '../adapter/fam_adapter_file',
    '../adapter/fam_adapter_search',
    '../util/fam_util_systemsetup'
], function (file, search, utilSetup) {
    
    function getFileId(filename){
        if (!filename) {
            return null;
        }
        
        var searchObj, res;
        
        searchObj = search.create({
            type    : 'file',
            filters : [['name', 'is', filename]],
            columns : ['internalid']
        });
        res = searchObj.run().getRange(0,2);
        
        if(res.length){
            if(res.length>1){
                log.audit('getFileId', 'Found more than 1 file with filename: ' + filename + '. Returning first file found');
            }
            
            return res[0].getValue('internalid');
        }
        else{
            log.audit('getFileId', 'File: ' + filename + ' not found.');
            return null;
        }
    }
    
    function FileStream(fileName, fileType, description) {
        this.fileName = fileName || '';
        this.fileType = fileType || file.getType('CSV');
        this.description = description || '';
        this.idx = 0;
        this.fileIdList = [];
        this.fileObj = null;
        this.maxSize = 1048576;  // default to 10MB
    }
        
    FileStream.prototype.createFile = function(contents) {
        this.idx++;
        contents = contents || '';
        var fileObj = file.create({
            name: this.fileName + (this.idx < 100 ? ('00' + this.idx).slice(-3) : this.idx) + '.csv',
            fileType: this.fileType,
            contents: contents + '\n'
        });
        var folder = utilSetup.getSetting('reportFolder');
        fileObj.folder = folder;
        fileObj.description = 'Generated by FAM' + (this.description ? '. ' + this.description : '');
        return fileObj;
    };
    
    FileStream.prototype.append = function(contents) {
        if (contents) {
            if (!this.fileObj) {
                this.fileObj = this.createFile(contents);
            }
            else if (this.fileObj.size >= this.maxSize) {
                this.save();
                this.fileObj = this.createFile(contents);
            }
            else {
                this.fileObj = this.fileObj.appendLine({ value: contents });
            }
        }
    };
    
    FileStream.prototype.save = function() {
        if (this.fileObj) {
            log.debug('file size', this.fileObj.size);
            if (this.fileObj.size > 0) {
                this.fileIdList.push(this.fileObj.save());
            }
        }
        else {
            log.debug('FileStream save', 'file is not yet created');
        }
        return this.fileIdList;
    };
    
    function loadFileContents(fileId, deleteFlag) {
        var fileObj, contents;

        fileObj = file.load({ id: fileId });
        contents = fileObj.getContents();
        
        //Trim down leading and trailing blank lines
        contents = contents.replace(/^[\r\n]+|[\r\n]+$/g, '');
        
        if (deleteFlag)
            file['delete']({ id: fileId });
        
        return contents;
    }
    
    return {
        getFileId : getFileId,
        FileStream: FileStream,
        loadFileContents: loadFileContents
    };
});