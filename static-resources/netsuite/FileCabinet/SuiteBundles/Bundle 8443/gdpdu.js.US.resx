<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Country">
    <value>Country</value>
  </data>
  <data name="March">
    <value>March</value>
  </data>
  <data name="ConfirmMessage">
    <value>You have initiated the generation of audit files.


This process might take some time to complete depending on the volume of data.
Upon completion, you will receive an email instruction on how to retrieve the generated files.


Press OK to continue.</value>
  </data>
  <data name="FirstFiscalMonth">
    <value>First Financial Month</value>
  </data>
  <data name="October">
    <value>October</value>
  </data>
  <data name="September">
    <value>September</value>
  </data>
  <data name="Fax">
    <value>Fax</value>
  </data>
  <data name="Subsidiary">
    <value>Subsidiary</value>
  </data>
  <data name="Address">
    <value>Address</value>
  </data>
  <data name="ReminderLine3">
    <value>Go to Home&gt;Preferences&gt;Restrict View and select the subsidiary that you want to run the audit reports for.</value>
  </data>
  <data name="AccountingBasis">
    <value>Accounting Basis</value>
  </data>
  <data name="June">
    <value>June</value>
  </data>
  <data name="May">
    <value>May</value>
  </data>
  <data name="JobStartedMessage">
    <value>At your request, NetSuite is generating the reports for the period: PeriodName.

 
When processing finishes, NetSuite will send you another email. This email will contain instructions on how to locate the files. Because the audit file may include transaction data for an entire fiscal year, generating the file could require a significant amount of time.

NOTE: While NetSuite generates the report, users can continue working with NetSuite.</value>
  </data>
  <data name="JobCompletedMessage">
    <value>The reports were successfully generated for the period PeriodName.&lt;BR&gt;
The reports can be accessed in the File Cabinet under the output folder RootFolder\ReportFolder.  Or by clicking on the link below:
&lt;BR&gt;
&lt;A href='FolderUrl'&gt;FolderUrl&lt;/A&gt;</value>
  </data>
  <data name="CompanyId">
    <value>Company ID</value>
  </data>
  <data name="GenerateReports">
    <value>Generate Reports</value>
  </data>
  <data name="BaseChartOfAccounts">
    <value>Base Chart of Accounts</value>
  </data>
  <data name="July">
    <value>July</value>
  </data>
  <data name="ZipCode">
    <value>Postal Code</value>
  </data>
  <data name="Currency">
    <value>Currency</value>
  </data>
  <data name="April">
    <value>April</value>
  </data>
  <data name="FinancialYear">
    <value>Financial Year</value>
  </data>
  <data name="December">
    <value>December</value>
  </data>
  <data name="AuditFileGeneration">
    <value>Audit File Generation</value>
  </data>
  <data name="AuditFileVersion">
    <value>Audit File Version</value>
  </data>
  <data name="DefaultOutputFolder">
    <value>Audit Files</value>
  </data>
  <data name="Phone">
    <value>Phone</value>
  </data>
  <data name="Name">
    <value>Company Name</value>
  </data>
  <data name="January">
    <value>January</value>
  </data>
  <data name="August">
    <value>August</value>
  </data>
  <data name="ReminderLine2">
    <value>Please ensure that you set the correct Subsidiary restrictions before generating the report.</value>
  </data>
  <data name="Region">
    <value>Region</value>
  </data>
  <data name="ReminderLine1">
    <value>REMINDER:</value>
  </data>
  <data name="February">
    <value>February</value>
  </data>
  <data name="OutputFolder">
    <value>Output Folder</value>
  </data>
  <data name="November">
    <value>November</value>
  </data>
</root>